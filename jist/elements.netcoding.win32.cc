/* Generated by "click-buildtool elem2export" on Wed Sep 17 13:11:00     2008 */

#include <click/config.h>
#include <click/package.hh>
#include "../elements/wifi/settxrate.hh"
#include "../elements/standard/delayshaper.hh"
#include "../elements/brn/infrastructureclient.hh"
#include "../elements/wifi/copyrxstats.hh"
#include "../elements/wifi/txflog.hh"
#include "../elements/wifi/filtertx.hh"
#include "../elements/vlan/vlantable.hh"
#include "../elements/wifi/ethercount.hh"
#include "../elements/icmp/icmppingresponder.hh"
#include "../elements/brn/pushdsrheader.hh"
#include "../elements/brn/printdeviceanno.hh"
#include "../elements/wifi/frag/fragmentdecap.hh"
#include "../elements/vlan/storevlan.hh"
#include "../elements/ip/ipmirror.hh"
#include "../elements/brn/stripdsrheader.hh"
#include "../elements/wifi/station/beacontracker.hh"
#include "../elements/wifi/readanno.hh"
#include "../elements/wifi/frag/checkfragment.hh"
#include "../elements/ip/decipttl.hh"
#include "../elements/brn/storeipethernet.hh"
#include "../elements/wifi/wififragment.hh"
#include "../elements/brn/pushmacheader.hh"
#include "../elements/netcoding/queuemonitor.hh"
#include "../elements/brn/etherdecap.hh"
#include "../elements/brn/reqforwarder.hh"
#include "../elements/brn/nodeidentity.hh"
#include "../elements/wifi/frag/fragmentencap.hh"
#include "../elements/standard/striptonet.hh"
#include "../elements/standard/storedata.hh"
#include "../elements/wifi/station/proberequester.hh"
#include "../elements/wifi/linktable.hh"
#include "../elements/brn/settxtries.hh"
#include "../elements/ip/ipfieldinfo.hh"
#include "../elements/icmp/icmpsendpings.hh"
#include "../elements/standard/linkunqueue.hh"
#include "../elements/netcoding/ncdecoder.hh"
#include "../elements/gateway/brnsetgateway.hh"
#include "../elements/wifi/wepdecap.hh"
#include "../elements/wifi/wifidefrag.hh"
#include "../elements/standard/staticpullswitch.hh"
#include "../elements/standard/ratedunqueue.hh"
#include "../elements/ip/ipinputcombo.hh"
#include "../elements/standard/randomsample.hh"
#include "../elements/standard/msqueue.hh"
#include "../elements/ip/ipencap.hh"
#include "../elements/icmp/checkicmpheader.hh"
#include "../elements/ethernet/ethermirror.hh"
#include "../elements/wifi/analysis/printseq.hh"
#include "../elements/standard/dropbroadcasts.hh"
#include "../elements/standard/delayunqueue.hh"
#include "../elements/wifi/availablerates.hh"
#include "../elements/userlevel/todump.hh"
#include "../elements/standard/settimestamp.hh"
#include "../elements/brn/tostations.hh"
#include "../elements/aqm/red.hh"
#include "../elements/wifi/analysis/counterrors.hh"
#include "../elements/standard/drivermanager.hh"
#include "../elements/dhcp/leasetable.hh"
#include "../elements/dhcp/dhcpclient.hh"
#include "../elements/wifi/frag/fragment.hh"
#include "../elements/wifi/analysis/wificounter.hh"
#include "../elements/brn/dsrdecap.hh"
#include "../elements/wifi/madwifirate.hh"
#include "../elements/standard/bwratedsplitter.hh"
#include "../elements/ip/fixipsrc.hh"
#include "../elements/tcpudp/settcpchecksum.hh"
#include "../elements/standard/spinlockrelease.hh"
#include "../elements/ip/setipchecksum.hh"
#include "../elements/brn/uniquepacketsource.hh"
#include "../elements/brn/disassociator.hh"
#include "../elements/app/ftpportmapper.hh"
#include "../elements/wifi/station/associationrequester.hh"
#include "../elements/brn/brniappdatahandler.hh"
#include "../elements/analysis/settimestampdelta.hh"
#include "../elements/standard/switch.hh"
#include "../elements/brn/dsrencap.hh"
#include "../elements/brn/dhcprequester.hh"
#include "../elements/ip/rfc2507c.hh"
#include "../elements/ip/getipaddress.hh"
#include "../elements/gateway/brngatewaydecap.hh"
#include "../elements/dhcp/dhcpserveroffer.hh"
#include "../elements/brn/setsourceandoutputfordevice.hh"
#include <click/standard/errorelement.hh>
#include "../elements/standard/bandwidthmeter.hh"
#include <click/standard/alignmentinfo.hh>
#include "../elements/ip/ipaddrpairrewriter.hh"
#include "../elements/analysis/anonipaddr.hh"
#include "../elements/wifi/filterphyerr.hh"
#include "../elements/wifi/ap/associationresponder.hh"
#include "../elements/standard/devirtualizeinfo.hh"
#include "../elements/standard/burster.hh"
#include "../elements/ethernet/hostetherfilter.hh"
#include "../elements/brn/resolveethernet.hh"
#include "../elements/ip/rfc2507d.hh"
#include "../elements/standard/ratedsource.hh"
#include "../elements/brn/errforwarder.hh"
#include "../elements/wifi/analysis/countfecbytes.hh"
#include "../elements/ns/fromsimdevice.hh"
#include "../elements/ip/ipreassembler.hh"
#include "../elements/gateway/brngatewayencap.hh"
#include "../elements/brn/nblist.hh"
#include "../elements/wifi/wepencap.hh"
#include "../elements/wifi/extradecap.hh"
#include "../elements/standard/rrsched.hh"
#include "../elements/standard/meter.hh"
#include "../elements/wifi/station/beaconscanner.hh"
#include "../elements/standard/staticswitch.hh"
#include "../elements/ip/ipgwoptions.hh"
#include "../elements/brn/routequerier.hh"
#include "../elements/brn/brniappstationtracker.hh"
#include "../elements/wifi/pushanno.hh"
#include "../elements/wifi/frag/fragmentresender.hh"
#include "../elements/standard/simplequeue.hh"
#include "../elements/standard/bwratedunqueue.hh"
#include "../elements/ip/ipclassifier.hh"
#include "../elements/brn/brniapproamingfilter.hh"
#include "../elements/ip/siphmapper.hh"
#include "../elements/icmp/icmppingrewriter.hh"
#include "../elements/brn/brnetxmetric.hh"
#include "../elements/wifi/settxpower.hh"
#include "../elements/vlan/vlantag.hh"
#include "../elements/brn/srcforwarder.hh"
#include "../elements/standard/tee.hh"
#include "../elements/standard/frontdropqueue.hh"
#include "../elements/ip/markipce.hh"
#include "../elements/wifi/extraencap.hh"
#include "../elements/ip/radixiplookup.hh"
#include "../elements/brn/brnassocresponder.hh"
#include "../elements/standard/timedsource.hh"
#include "../elements/ip/ipprint.hh"
#include "../elements/icmp/icmperror.hh"
#include "../elements/wifi/wifiseq.hh"
#include "../elements/wifi/wifidecap.hh"
#include "../elements/tcpudp/setudpchecksum.hh"
#include "../elements/ip/ipnameinfo.hh"
#include "../elements/brn/brniappnotifyhandler.hh"
#include "../elements/netcoding/ncencoder.hh"
#include "../elements/brn/compoundhandler.hh"
#include "../elements/wifi/ap/beaconsource.hh"
#include "../elements/brn/testsink.hh"
#include "../elements/wifi/frag/defragment.hh"
#include "../elements/vlan/restorevlan.hh"
#include "../elements/userlevel/fromdump.hh"
#include "../elements/standard/paint.hh"
#include "../elements/standard/mixedqueue.hh"
#include "../elements/ip/ipaddrrewriter.hh"
#include "../elements/standard/strip.hh"
#include "../elements/standard/checkpaint.hh"
#include "../elements/ip/unstripipheader.hh"
#include "../elements/wifi/wifiencap.hh"
#include "../elements/wifi/frag/fragmentdupefilter.hh"
#include "../elements/standard/suppressor.hh"
#include "../elements/standard/messageelement.hh"
#include "../elements/ip/ipfragmenter.hh"
#include "../elements/gateway/brngateway.hh"
#include "../elements/ethernet/checkarpheader.hh"
#include "../elements/dhcp/dhcpserverrelease.hh"
#include "../elements/wifi/ap/openauthresponder.hh"
#include "../elements/standard/paintswitch.hh"
#include "../elements/standard/setpackettype.hh"
#include "../elements/standard/nullelement.hh"
#include "../elements/dhcp/leasepool.hh"
#include "../elements/wifi/athdescdecap.hh"
#include "../elements/vlan/checkvlan.hh"
#include "../elements/standard/nulls.hh"
#include <click/standard/addressinfo.hh>
#include "../elements/ip/checkipheader.hh"
#include "../elements/wifi/autoratefallback.hh"
#include "../elements/standard/shaper.hh"
#include "../elements/ethernet/arpfaker.hh"
#include "../elements/vlan/printvlan.hh"
#include "../elements/brn/todumpdlg.hh"
#include "../elements/brn/readhandlerfilter.hh"
#include "../elements/ip/storeipaddress.hh"
#include "../elements/ip/ipoutputcombo.hh"
#include "../elements/wifi/setwifiextraflag.hh"
#include "../elements/wifi/athdescencap.hh"
#include "../elements/wifi/arptable.hh"
#include "../elements/brn/setetheraddr.hh"
#include "../elements/standard/unqueue2.hh"
#include "../elements/standard/painttee.hh"
#include "../elements/wifi/prism2decap.hh"
#include "../elements/icmp/icmprewriter.hh"
#include "../elements/brn/setetheranno.hh"
#include "../elements/analysis/timefilter.hh"
#include "../elements/wifi/printtxfeedback.hh"
#include "../elements/standard/script.hh"
#include "../elements/netcoding/fragmentsender.hh"
#include "../elements/ns/tosimdevice.hh"
#include "../elements/netcoding/netcodingprint.hh"
#include "../elements/netcoding/fragmenter.hh"
#include "../elements/analysis/eraseippayload.hh"
#include "../elements/wifi/txstat.hh"
#include "../elements/wifi/prism2encap.hh"
#include "../elements/brn/assoclist.hh"
#include "../elements/wifi/printwifi.hh"
#include "../elements/standard/classifier.hh"
#include "../elements/dhcp/leasehash.hh"
#include "../elements/brn/replyforwarder.hh"
#include "../elements/brn/filterbssid.hh"
#include "../elements/standard/ratedsplitter.hh"
#include "../elements/standard/randomerror.hh"
#include "../elements/ip/stripipheader.hh"
#include "../elements/brn/brniappencap.hh"
#include "../elements/wifi/setrts.hh"
#include "../elements/icmp/icmppingencap.hh"
#include "../elements/standard/idle.hh"
#include "../elements/netcoding/tracereporter.hh"
#include "../elements/ip/lookupiproute.hh"
#include "../elements/gateway/brngatewaysupervisor.hh"
#include "../elements/brnvlan/brncheckvlan.hh"
#include "../elements/brn/brnlinktable.hh"
#include "../elements/wifi/packetstore.hh"
#include "../elements/brn/brnds.hh"
#include "../elements/dhcp/checkdhcpmsg.hh"
#include "../elements/brn/dstclassifier.hh"
#include "../elements/netcoding/nccache.hh"
#include "../elements/brn/etheripaddrewriter.hh"
#include "../elements/brn/dhcpprint.hh"
#include "../elements/gateway/brnicmppingsourcegatewaytester.hh"
#include "../elements/brn/clientds.hh"
#include "../elements/analysis/timesortedsched.hh"
#include "../elements/standard/print.hh"
#include "../elements/dhcp/dhcpoffermsgqueue.hh"
#include "../elements/brn/dhcpserver.hh"
#include "../elements/analysis/aggregateipflows.hh"
#include "../elements/standard/averagecounter.hh"
#include "../elements/brn/checkbrnheader.hh"
#include "../elements/standard/infinitesource.hh"
#include <click/standard/scheduleinfo.hh>
#include "../elements/standard/counter.hh"
#include "../elements/ip/rripmapper.hh"
#include "../elements/ethernet/arpquerier.hh"
#include "../elements/brn/hostwififilter.hh"
#include "../elements/brn/dsrclassifier.hh"
#include "../elements/wifi/analysis/printrate.hh"
#include "../elements/tcpudp/tcpipsend.hh"
#include "../elements/standard/fullnotequeue.hh"
#include "../elements/brnvlan/brnvlan.hh"
#include "../elements/standard/notifierqueue.hh"
#include "../elements/standard/checkcrc32.hh"
#include "../elements/ip/lineariplookup.hh"
#include "../elements/gateway/brnpacketbuffer.hh"
#include "../elements/wifi/frag/fragmentack.hh"
#include "../elements/standard/randomswitch.hh"
#include "../elements/ip/setrandipaddress.hh"
#include "../elements/analysis/timerange.hh"
#include "../elements/brn/brniapphellohandler.hh"
#include "../elements/wifi/rxstats.hh"
#include "../elements/vlan/vlandecap.hh"
#include "../elements/brn/brnencap.hh"
#include "../elements/analysis/storetimestamp.hh"
#include "../elements/wifi/analysis/printpower.hh"
#include "../elements/tcpudp/checktcpheader.hh"
#include "../elements/netcoding/defragmenter.hh"
#include "../elements/brn/identityclassifier.hh"
#include "../elements/brn/arp.hh"
#include "../elements/ip/setipaddress.hh"
#include "../elements/brn/setbrntos.hh"
#include "../elements/wifi/station/openauthrequester.hh"
#include "../elements/standard/discardnofree.hh"
#include "../elements/wifi/analysis/errorthreshold.hh"
#include "../elements/tcpudp/dynudpipencap.hh"
#include "../elements/standard/unstrip.hh"
#include "../elements/standard/discard.hh"
#include "../elements/dhcp/dhcpunicastencap.hh"
#include "../elements/brn/fromdevsim.hh"
#include "../elements/brn/falcondht.hh"
#include "../elements/brn/brnettmetric.hh"
#include "../elements/standard/spinlockacquire.hh"
#include "../elements/standard/priosched.hh"
#include "../elements/standard/checklength.hh"
#include "../elements/standard/align.hh"
#include "../elements/brnvlan/brnvlantag.hh"
#include "../elements/brn/brntosclassifier.hh"
#include "../elements/netcoding/tracecollector.hh"
#include "../elements/gateway/brnsetgatewayonflow.hh"
#include "../elements/brn/brniappstationsnooper.hh"
#include "../elements/tcpudp/checkudpheader.hh"
#include "../elements/ethernet/etherencap.hh"
#include "../elements/brn/tomeshneighbors.hh"
#include "../elements/ip/checkipheader2.hh"
#include "../elements/wifi/probetxrate.hh"
#include "../elements/standard/drr.hh"
#include "../elements/ip/ipfilter.hh"
#include "../elements/brn/tothisnode.hh"
#include "../elements/wifi/wirelessinfo.hh"
#include "../elements/tcpudp/tcprewriter.hh"
#include "../elements/ethernet/arpprint.hh"
#include "../elements/brn/signal.hh"
#include "../elements/standard/spinlockinfo.hh"
#include "../elements/dhcp/dhcpclassifier.hh"
#include "../elements/brn/brnavgcnt.hh"
#include "../elements/standard/strideswitch.hh"
#include "../elements/ip/sortediplookup.hh"
#include "../elements/brn/brnetherencap.hh"
#include "../elements/brn/brniapprouteupdatehandler.hh"
#include "../elements/wifi/radiotapdecap.hh"
#include "../elements/netcoding/fragmentreceiver.hh"
#include "../elements/wifi/frag/printfragment.hh"
#include "../elements/standard/randomsource.hh"
#include "../elements/brn/brnflooding.hh"
#include "../elements/aqm/adaptivered.hh"
#include "../elements/wifi/filterfailures.hh"
#include "../elements/standard/pokehandlers.hh"
#include "../elements/brn/brnassocrequester.hh"
#include "../elements/wifi/analysis/locationhistogram.hh"
#include "../elements/vlan/vlanencap.hh"
#include <click/standard/portinfo.hh>
#include "../elements/brn/onehopneighbor.hh"
#include "../elements/brn/dhttester.hh"
#include "../elements/wifi/radiotapencap.hh"
#include "../elements/standard/unqueue.hh"
#include "../elements/standard/truncate.hh"
#include "../elements/standard/pullswitch.hh"
#include "../elements/wifi/analysis/countfragbytes.hh"
#include "../elements/tcpudp/iprewriter.hh"
#include "../elements/wifi/wifidupefilter.hh"
#include "../elements/ns/tosimtrace.hh"
#include "../elements/ip/markipheader.hh"
#include "../elements/brn/addethernsclick.hh"
#include "../elements/dhcp/dhcpserverack.hh"
#include "../elements/brn/pushbrnheader.hh"
#include "../elements/standard/timedsink.hh"
#include "../elements/standard/setcrc32.hh"
#include "../elements/brn/stripbrnheader.hh"
#include "../elements/brn/brnprint.hh"
#include "../elements/standard/compblock.hh"
#include "../elements/standard/bandwidthshaper.hh"
#include "../elements/ip/ripsend.hh"
#include "../elements/brn/brnlinkstat.hh"
#include "../elements/tcpudp/udpipencap.hh"
#include "../elements/standard/setannobyte.hh"
#include "../elements/netcoding/headerpacker.hh"
#include "../elements/standard/quitwatcher.hh"
#include "../elements/ip/setipdscp.hh"
#include "../elements/ethernet/arpresponder.hh"
#include "../elements/brn/stationhandover.hh"
#include "../elements/wifi/linkfailuredetection.hh"
#include "../elements/dhcp/dhcpicmpencap.hh"
#include "../elements/standard/hashswitch.hh"
#include "../elements/standard/block.hh"
#include "../elements/standard/rrswitch.hh"
#include "../elements/ethernet/ensureether.hh"
#include "../elements/brn/brnroutecache.hh"
#include "../elements/brn/testetherdecap.hh"
#include "../elements/wifi/ap/stationtable.hh"
#include "../elements/wifi/ap/proberesponder.hh"
#include "../elements/standard/stridesched.hh"
#include "../elements/ip/iprwpatterns.hh"
#include "../elements/brn/arpclient.hh"
CLICK_USING_DECLS
static Element *
beetlemonkey(uintptr_t heywood)
{
  switch (heywood) {
   case 0: return new AggregateIPFlows;
   case 1: return new AnonymizeIPAddr;
   case 2: return new EraseIPPayload;
   case 3: return new SetTimestampDelta;
   case 4: return new StoreTimestamp;
   case 5: return new TimeFilter;
   case 6: return new TimeRange;
   case 7: return new TimeSortedSched;
   case 8: return new FTPPortMapper;
   case 9: return new AdaptiveRED;
   case 10: return new RED;
   case 11: return new AddEtherNsclick;
   case 12: return new Arp;
   case 13: return new ARPClient;
   case 14: return new AssocList;
   case 15: return new BRNAssocRequester;
   case 16: return new BRNAssocResponder;
   case 17: return new BrnAvgCnt;
   case 18: return new BRNDS;
   case 19: return new BRNEncap;
   case 20: return new BRNEtherEncap;
   case 21: return new BRNETTMetric;
   case 22: return new BRNETXMetric;
   case 23: return new BrnFlooding;
   case 24: return new BrnIappDataHandler;
   case 25: return new BrnIappEncap;
   case 26: return new BrnIappHelloHandler;
   case 27: return new BrnIappNotifyHandler;
   case 28: return new BrnIappRoamingFilter;
   case 29: return new BrnIappRouteUpdateHandler;
   case 30: return new BrnIappStationSnooper;
   case 31: return new BrnIappStationTracker;
   case 32: return new BRNLinkStat;
   case 33: return new BrnLinkTable;
   case 34: return new BRNPrint;
   case 35: return new BrnRouteCache;
   case 36: return new BrnTosClassifier;
   case 37: return new CheckBrnHeader;
   case 38: return new ClientDS;
   case 39: return new CompoundHandler;
   case 40: return new DHCPPrint;
   case 41: return new DHCPRequester;
   case 42: return new DHCPServer;
   case 43: return new DHTTester;
   case 44: return new Disassociator;
   case 45: return new DSRClassifier;
   case 46: return new DSRDecap;
   case 47: return new DSREncap;
   case 48: return new DstClassifier;
   case 49: return new ErrorForwarder;
   case 50: return new EtherDecap;
   case 51: return new EtherIpAddrRewriter;
   case 52: return new FalconDHT;
   case 53: return new FilterBSSID;
   case 54: return new FromDevSim;
   case 55: return new HostWifiFilter;
   case 56: return new IdentityClassifier;
   case 57: return new InfrastructureClient;
   case 58: return new NeighborList;
   case 59: return new NodeIdentity;
   case 60: return new OneHopNeighbor;
   case 61: return new PrintDeviceAnno;
   case 62: return new PushBRNHeader;
   case 63: return new PushDSRHeader;
   case 64: return new PushMACHeader;
   case 65: return new ReadHandlerFilter;
   case 66: return new ReplyForwarder;
   case 67: return new RequestForwarder;
   case 68: return new ResolveEthernet;
   case 69: return new RouteQuerier;
   case 70: return new SetBrnTos;
   case 71: return new SetEtherAddr;
   case 72: return new SetEtherAnno;
   case 73: return new SetSourceAndOutputForDevice;
   case 74: return new SetTXTries;
   case 75: return new Signal;
   case 76: return new SrcForwarder;
   case 77: return new StationHandover;
   case 78: return new StoreIPEthernet;
   case 79: return new StripBRNHeader;
   case 80: return new StripDSRHeader;
   case 81: return new TestEtherDecap;
   case 82: return new TestSink;
   case 83: return new ToDumpDlg;
   case 84: return new ToMeshNeighbors;
   case 85: return new ToStations;
   case 86: return new ToThisNode;
   case 87: return new UniquePacketSource;
   case 88: return new BRNCheckVLAN;
   case 89: return new BRNVLAN;
   case 90: return new BRNVLANTag;
   case 91: return new CheckDHCPMsg;
   case 92: return new DHCPClassifier;
   case 93: return new DHCPClient;
   case 94: return new DHCP_ICMP_Encap;
   case 95: return new DHCPOfferMsgQueue;
   case 96: return new DHCPServerACKorNAK;
   case 97: return new DHCPServerOffer;
   case 98: return new DHCPServerRelease;
   case 99: return new DHCPUnicastEncap;
   case 100: return new LeaseHash;
   case 101: return new LeaseHash;
   case 102: return new LeasePool;
   case 103: return new LeasePool;
   case 104: return new DHCPLeaseTable;
   case 105: return new ARPFaker;
   case 106: return new ARPPrint;
   case 107: return new ARPQuerier;
   case 108: return new ARPResponder;
   case 109: return new CheckARPHeader;
   case 110: return new EnsureEther;
   case 111: return new EtherEncap;
   case 112: return new EtherMirror;
   case 113: return new HostEtherFilter;
   case 114: return new BRNGateway;
   case 115: return new BRNGatewayDecap;
   case 116: return new BRNGatewayEncap;
   case 117: return new BRNGatewaySupervisor;
   case 118: return new BRNICMPPingSourceGatewayTester;
   case 119: return new BRNPacketBuffer;
   case 120: return new BRNSetGateway;
   case 121: return new BRNSetGatewayOnFlow;
   case 122: return new CheckICMPHeader;
   case 123: return new ICMPError;
   case 124: return new ICMPPingEncap;
   case 125: return new ICMPPingResponder;
   case 126: return new ICMPPingRewriter;
   case 127: return new ICMPRewriter;
   case 128: return new ICMPPingSource;
   case 129: return new ICMPPingSource;
   case 130: return new CheckIPHeader;
   case 133: return new CheckIPHeader2;
   case 134: return new DecIPTTL;
   case 135: return new FixIPSrc;
   case 136: return new GetIPAddress;
   case 137: return new IPAddrPairRewriter;
   case 138: return new IPAddrRewriter;
   case 139: return new IPClassifier;
   case 140: return new IPEncap;
   case 141: return new IPFieldInfo;
   case 144: return new IPFilter;
   case 147: return new IPFragmenter;
   case 148: return new IPGWOptions;
   case 149: return new IPInputCombo;
   case 150: return new IPMirror;
   case 151: return new IPNameInfo;
   case 154: return new IPOutputCombo;
   case 155: return new IPPrint;
   case 156: return new IPReassembler;
   case 157: return new IPRewriterPatterns;
   case 158: return new LinearIPLookup;
   case 159: return new StaticIPLookup;
   case 160: return new MarkIPCE;
   case 161: return new MarkIPHeader;
   case 162: return new RadixIPLookup;
   case 163: return new RFC2507c;
   case 164: return new RFC2507d;
   case 165: return new RIPSend;
   case 166: return new RoundRobinIPMapper;
   case 167: return new SetIPAddress;
   case 168: return new SetIPChecksum;
   case 169: return new SetIPDSCP;
   case 170: return new SetRandIPAddress;
   case 171: return new SourceIPHashMapper;
   case 172: return new SortedIPLookup;
   case 173: return new StoreIPAddress;
   case 174: return new StripIPHeader;
   case 175: return new UnstripIPHeader;
   case 176: return new Defragmenter;
   case 177: return new Fragmenter;
   case 178: return new FragmentReceiver;
   case 179: return new FragmentSender;
   case 180: return new HeaderPacker;
   case 181: return new NetcodingCache;
   case 182: return new NetcodingDecoder;
   case 183: return new NetcodingEncoder;
   case 184: return new NetcodingPrint;
   case 185: return new QueueMonitor;
   case 186: return new TraceCollector;
   case 187: return new TraceReporter;
   case 188: return new FromSimDevice;
   case 189: return new ToSimDevice;
   case 190: return new ToSimTrace;
   case 191: return new AddressInfo;
   case 192: return new Align;
   case 193: return new AlignmentInfo;
   case 194: return new AverageCounter;
   case 195: return new BandwidthMeter;
   case 196: return new BandwidthShaper;
   case 197: return new Block;
   case 198: return new Burster;
   case 199: return new BandwidthRatedSplitter;
   case 200: return new BandwidthRatedUnqueue;
   case 201: return new CheckCRC32;
   case 202: return new CheckLength;
   case 203: return new CheckPaint;
   case 204: return new Classifier;
   case 205: return new CompareBlock;
   case 206: return new Counter;
   case 207: return new DelayShaper;
   case 208: return new DelayUnqueue;
   case 209: return new DevirtualizeInfo;
   case 210: return new Discard;
   case 211: return new DiscardNoFree;
   case 212: return new DriverManager;
   case 213: return new DropBroadcasts;
   case 214: return new DRRSched;
   case 215: return new ErrorElement;
   case 216: return new FrontDropQueue;
   case 217: return new FullNoteQueue;
   case 218: return new FullNoteQueue;
   case 219: return new HashSwitch;
   case 220: return new Idle;
   case 221: return new InfiniteSource;
   case 222: return new LinkUnqueue;
   case 223: return new MessageElement;
   case 224: return new Meter;
   case 225: return new MixedQueue;
   case 226: return new MSQueue;
   case 227: return new NotifierQueue;
   case 228: return new NullElement;
   case 229: return new PushNullElement;
   case 230: return new PullNullElement;
   case 231: return new Null4;
   case 232: return new Null5;
   case 233: return new Null6;
   case 234: return new Null7;
   case 235: return new Null8;
   case 236: return new Null1;
   case 237: return new Null2;
   case 238: return new Null3;
   case 239: return new Paint;
   case 240: return new PaintSwitch;
   case 241: return new PaintTee;
   case 242: return new PokeHandlers;
   case 243: return new PortInfo;
   case 244: return new Print;
   case 245: return new PrioSched;
   case 246: return new PullSwitch;
   case 247: return new QuitWatcher;
   case 248: return new RandomBitErrors;
   case 249: return new RandomSample;
   case 250: return new RandomSource;
   case 251: return new RandomSwitch;
   case 252: return new RatedSource;
   case 253: return new RatedSplitter;
   case 254: return new RatedUnqueue;
   case 255: return new RRSched;
   case 256: return new RoundRobinSwitch;
   case 257: return new ScheduleInfo;
   case 258: return new Script;
   case 261: return new SetAnnoByte;
   case 262: return new SetCRC32;
   case 263: return new SetPacketType;
   case 264: return new SetTimestamp;
   case 265: return new Shaper;
   case 266: return new SimpleQueue;
   case 267: return new SpinlockAcquire;
   case 268: return new SpinlockInfo;
   case 269: return new SpinlockRelease;
   case 270: return new StaticPullSwitch;
   case 271: return new StaticSwitch;
   case 272: return new StoreData;
   case 273: return new StrideSched;
   case 274: return new StrideSwitch;
   case 275: return new Strip;
   case 276: return new StripToNetworkHeader;
   case 277: return new Suppressor;
   case 278: return new Switch;
   case 279: return new Tee;
   case 280: return new PullTee;
   case 281: return new TimedSink;
   case 282: return new TimedSource;
   case 283: return new Truncate;
   case 284: return new Unqueue;
   case 285: return new Unqueue2;
   case 286: return new Unstrip;
   case 287: return new CheckTCPHeader;
   case 288: return new CheckUDPHeader;
   case 289: return new DynamicUDPIPEncap;
   case 290: return new IPRewriter;
   case 291: return new SetTCPChecksum;
   case 292: return new SetUDPChecksum;
   case 293: return new TCPIPSend;
   case 294: return new TCPRewriter;
   case 295: return new UDPIPEncap;
   case 296: return new FromDump;
   case 297: return new ToDump;
   case 298: return new CheckVLAN;
   case 299: return new PrintVLAN;
   case 300: return new RestoreVLAN;
   case 301: return new StoreVLAN;
   case 302: return new VLANDecap;
   case 303: return new VLANEncap;
   case 304: return new VLANTable;
   case 305: return new VLANTag;
   case 306: return new CountErrors;
   case 307: return new CountFecBytes;
   case 308: return new CountFragBytes;
   case 309: return new ErrorThreshold;
   case 310: return new LocationHistogram;
   case 311: return new PrintPower;
   case 312: return new PrintRate;
   case 313: return new PrintSeq;
   case 314: return new WifiCounter;
   case 315: return new AssociationResponder;
   case 316: return new BeaconSource;
   case 317: return new OpenAuthResponder;
   case 318: return new ProbeResponder;
   case 319: return new StationTable;
   case 320: return new ARPTable;
   case 321: return new AthdescDecap;
   case 322: return new AthdescEncap;
   case 323: return new AutoRateFallback;
   case 324: return new AvailableRates;
   case 325: return new CopyRXStats;
   case 326: return new EtherCount;
   case 327: return new ExtraDecap;
   case 328: return new ExtraEncap;
   case 329: return new FilterFailures;
   case 330: return new FilterPhyErr;
   case 331: return new FilterTX;
   case 332: return new CheckFragment;
   case 333: return new Defragment;
   case 334: return new Fragment;
   case 335: return new FragmentAck;
   case 336: return new FragmentDecap;
   case 337: return new FragmentDupeFilter;
   case 338: return new FragmentEncap;
   case 339: return new FragmentResender;
   case 340: return new PrintFragment;
   case 341: return new LinkFailureDetection;
   case 342: return new LinkTable;
   case 343: return new MadwifiRate;
   case 344: return new PacketStore;
   case 345: return new PrintTXFeedback;
   case 346: return new PrintWifi;
   case 347: return new Prism2Decap;
   case 348: return new Prism2Encap;
   case 349: return new ProbeTXRate;
   case 350: return new PushAnno;
   case 351: return new RadiotapDecap;
   case 352: return new RadiotapEncap;
   case 353: return new ReadAnno;
   case 354: return new RXStats;
   case 355: return new SetRTS;
   case 356: return new SetTXPower;
   case 357: return new SetTXRate;
   case 358: return new SetWifiExtraFlag;
   case 359: return new AssociationRequester;
   case 360: return new BeaconScanner;
   case 361: return new BeaconTracker;
   case 362: return new OpenAuthRequester;
   case 363: return new ProbeRequester;
   case 364: return new TXFLog;
   case 365: return new TXStat;
   case 366: return new WepDecap;
   case 367: return new WepEncap;
   case 368: return new WifiDecap;
   case 369: return new WifiDefrag;
   case 370: return new WifiDupeFilter;
   case 371: return new WifiEncap;
   case 372: return new WifiFragment;
   case 373: return new WifiSeq;
   case 374: return new WirelessInfo;
   default: return 0;
  }
}

#ifdef CLICK_LINUXMODULE
#define click_add_element_type(n, f, t) click_add_element_type((n), (f), (t), 0)
#endif
void
click_export_elements()
{
  (void) click_add_element_type("AggregateIPFlows", beetlemonkey, 0);
  (void) click_add_element_type("AnonymizeIPAddr", beetlemonkey, 1);
  (void) click_add_element_type("EraseIPPayload", beetlemonkey, 2);
  (void) click_add_element_type("SetTimestampDelta", beetlemonkey, 3);
  (void) click_add_element_type("StoreTimestamp", beetlemonkey, 4);
  (void) click_add_element_type("TimeFilter", beetlemonkey, 5);
  (void) click_add_element_type("TimeRange", beetlemonkey, 6);
  (void) click_add_element_type("TimeSortedSched", beetlemonkey, 7);
  (void) click_add_element_type("FTPPortMapper", beetlemonkey, 8);
  (void) click_add_element_type("AdaptiveRED", beetlemonkey, 9);
  (void) click_add_element_type("RED", beetlemonkey, 10);
  (void) click_add_element_type("AddEtherNsclick", beetlemonkey, 11);
  (void) click_add_element_type("Arp", beetlemonkey, 12);
  (void) click_add_element_type("ARPClient", beetlemonkey, 13);
  (void) click_add_element_type("AssocList", beetlemonkey, 14);
  (void) click_add_element_type("BRNAssocRequester", beetlemonkey, 15);
  (void) click_add_element_type("BRNAssocResponder", beetlemonkey, 16);
  (void) click_add_element_type("BrnAvgCnt", beetlemonkey, 17);
  (void) click_add_element_type("BRNDS", beetlemonkey, 18);
  (void) click_add_element_type("BRNEncap", beetlemonkey, 19);
  (void) click_add_element_type("BRNEtherEncap", beetlemonkey, 20);
  (void) click_add_element_type("BRNETTMetric", beetlemonkey, 21);
  (void) click_add_element_type("BRNETXMetric", beetlemonkey, 22);
  (void) click_add_element_type("BrnFlooding", beetlemonkey, 23);
  (void) click_add_element_type("BrnIappDataHandler", beetlemonkey, 24);
  (void) click_add_element_type("BrnIappEncap", beetlemonkey, 25);
  (void) click_add_element_type("BrnIappHelloHandler", beetlemonkey, 26);
  (void) click_add_element_type("BrnIappNotifyHandler", beetlemonkey, 27);
  (void) click_add_element_type("BrnIappRoamingFilter", beetlemonkey, 28);
  (void) click_add_element_type("BrnIappRouteUpdateHandler", beetlemonkey, 29);
  (void) click_add_element_type("BrnIappStationSnooper", beetlemonkey, 30);
  (void) click_add_element_type("BrnIappStationTracker", beetlemonkey, 31);
  (void) click_add_element_type("BRNLinkStat", beetlemonkey, 32);
  (void) click_add_element_type("BrnLinkTable", beetlemonkey, 33);
  (void) click_add_element_type("BRNPrint", beetlemonkey, 34);
  (void) click_add_element_type("BrnRouteCache", beetlemonkey, 35);
  (void) click_add_element_type("BrnTosClassifier", beetlemonkey, 36);
  (void) click_add_element_type("CheckBrnHeader", beetlemonkey, 37);
  (void) click_add_element_type("ClientDS", beetlemonkey, 38);
  (void) click_add_element_type("CompoundHandler", beetlemonkey, 39);
  (void) click_add_element_type("DHCPPrint", beetlemonkey, 40);
  (void) click_add_element_type("DHCPRequester", beetlemonkey, 41);
  (void) click_add_element_type("DHCPServer", beetlemonkey, 42);
  (void) click_add_element_type("DHTTester", beetlemonkey, 43);
  (void) click_add_element_type("Disassociator", beetlemonkey, 44);
  (void) click_add_element_type("DSRClassifier", beetlemonkey, 45);
  (void) click_add_element_type("DSRDecap", beetlemonkey, 46);
  (void) click_add_element_type("DSREncap", beetlemonkey, 47);
  (void) click_add_element_type("DstClassifier", beetlemonkey, 48);
  (void) click_add_element_type("ErrorForwarder", beetlemonkey, 49);
  (void) click_add_element_type("EtherDecap", beetlemonkey, 50);
  (void) click_add_element_type("EtherIpAddrRewriter", beetlemonkey, 51);
  (void) click_add_element_type("FalconDHT", beetlemonkey, 52);
  (void) click_add_element_type("FilterBSSID", beetlemonkey, 53);
  (void) click_add_element_type("FromDevSim", beetlemonkey, 54);
  (void) click_add_element_type("HostWifiFilter", beetlemonkey, 55);
  (void) click_add_element_type("IdentityClassifier", beetlemonkey, 56);
  (void) click_add_element_type("InfrastructureClient", beetlemonkey, 57);
  (void) click_add_element_type("NeighborList", beetlemonkey, 58);
  (void) click_add_element_type("NodeIdentity", beetlemonkey, 59);
  (void) click_add_element_type("OneHopNeighbor", beetlemonkey, 60);
  (void) click_add_element_type("PrintDeviceAnno", beetlemonkey, 61);
  (void) click_add_element_type("PushBRNHeader", beetlemonkey, 62);
  (void) click_add_element_type("PushDSRHeader", beetlemonkey, 63);
  (void) click_add_element_type("PushMACHeader", beetlemonkey, 64);
  (void) click_add_element_type("ReadHandlerFilter", beetlemonkey, 65);
  (void) click_add_element_type("ReplyForwarder", beetlemonkey, 66);
  (void) click_add_element_type("RequestForwarder", beetlemonkey, 67);
  (void) click_add_element_type("ResolveEthernet", beetlemonkey, 68);
  (void) click_add_element_type("RouteQuerier", beetlemonkey, 69);
  (void) click_add_element_type("SetBrnTos", beetlemonkey, 70);
  (void) click_add_element_type("SetEtherAddr", beetlemonkey, 71);
  (void) click_add_element_type("SetEtherAnno", beetlemonkey, 72);
  (void) click_add_element_type("SetSourceAndOutputForDevice", beetlemonkey, 73);
  (void) click_add_element_type("SetTXTries", beetlemonkey, 74);
  (void) click_add_element_type("Signal", beetlemonkey, 75);
  (void) click_add_element_type("SrcForwarder", beetlemonkey, 76);
  (void) click_add_element_type("StationHandover", beetlemonkey, 77);
  (void) click_add_element_type("StoreIPEthernet", beetlemonkey, 78);
  (void) click_add_element_type("StripBRNHeader", beetlemonkey, 79);
  (void) click_add_element_type("StripDSRHeader", beetlemonkey, 80);
  (void) click_add_element_type("TestEtherDecap", beetlemonkey, 81);
  (void) click_add_element_type("TestSink", beetlemonkey, 82);
  (void) click_add_element_type("ToDumpDlg", beetlemonkey, 83);
  (void) click_add_element_type("ToMeshNeighbors", beetlemonkey, 84);
  (void) click_add_element_type("ToStations", beetlemonkey, 85);
  (void) click_add_element_type("ToThisNode", beetlemonkey, 86);
  (void) click_add_element_type("UniquePacketSource", beetlemonkey, 87);
  (void) click_add_element_type("BRNCheckVLAN", beetlemonkey, 88);
  (void) click_add_element_type("BRNVLAN", beetlemonkey, 89);
  (void) click_add_element_type("BRNVLANTag", beetlemonkey, 90);
  (void) click_add_element_type("CheckDHCPMsg", beetlemonkey, 91);
  (void) click_add_element_type("DHCPClassifier", beetlemonkey, 92);
  (void) click_add_element_type("DHCPClient", beetlemonkey, 93);
  (void) click_add_element_type("DHCPICMPEncap", beetlemonkey, 94);
  (void) click_add_element_type("DHCPOfferMsgQueue", beetlemonkey, 95);
  (void) click_add_element_type("DHCPServerACKorNAK", beetlemonkey, 96);
  (void) click_add_element_type("DHCPServerOffer", beetlemonkey, 97);
  (void) click_add_element_type("DHCPServerRelease", beetlemonkey, 98);
  (void) click_add_element_type("DHCPUnicastEncap", beetlemonkey, 99);
  (void) click_add_element_type("DHCPLeaseHash", beetlemonkey, 100);
  (void) click_add_element_type("LeaseHash", beetlemonkey, 101);
  (void) click_add_element_type("DHCPLeasePool", beetlemonkey, 102);
  (void) click_add_element_type("LeasePool", beetlemonkey, 103);
  (void) click_add_element_type("DHCPLeaseTable", beetlemonkey, 104);
  (void) click_add_element_type("ARPFaker", beetlemonkey, 105);
  (void) click_add_element_type("ARPPrint", beetlemonkey, 106);
  (void) click_add_element_type("ARPQuerier", beetlemonkey, 107);
  (void) click_add_element_type("ARPResponder", beetlemonkey, 108);
  (void) click_add_element_type("CheckARPHeader", beetlemonkey, 109);
  (void) click_add_element_type("EnsureEther", beetlemonkey, 110);
  (void) click_add_element_type("EtherEncap", beetlemonkey, 111);
  (void) click_add_element_type("EtherMirror", beetlemonkey, 112);
  (void) click_add_element_type("HostEtherFilter", beetlemonkey, 113);
  (void) click_add_element_type("BRNGateway", beetlemonkey, 114);
  (void) click_add_element_type("BRNGatewayDecap", beetlemonkey, 115);
  (void) click_add_element_type("BRNGatewayEncap", beetlemonkey, 116);
  (void) click_add_element_type("BRNGatewaySupervisor", beetlemonkey, 117);
  (void) click_add_element_type("BRNICMPPingSourceGatewayTester", beetlemonkey, 118);
  (void) click_add_element_type("BRNPacketBuffer", beetlemonkey, 119);
  (void) click_add_element_type("BRNSetGateway", beetlemonkey, 120);
  (void) click_add_element_type("BRNSetGatewayOnFlow", beetlemonkey, 121);
  (void) click_add_element_type("CheckICMPHeader", beetlemonkey, 122);
  (void) click_add_element_type("ICMPError", beetlemonkey, 123);
  (void) click_add_element_type("ICMPPingEncap", beetlemonkey, 124);
  (void) click_add_element_type("ICMPPingResponder", beetlemonkey, 125);
  (void) click_add_element_type("ICMPPingRewriter", beetlemonkey, 126);
  (void) click_add_element_type("ICMPRewriter", beetlemonkey, 127);
  (void) click_add_element_type("ICMPPingSource", beetlemonkey, 128);
  (void) click_add_element_type("ICMPSendPings", beetlemonkey, 129);
  (void) click_add_element_type("CheckIPHeader", beetlemonkey, 130);
  CheckIPHeader::static_initialize();
  (void) click_add_element_type("CheckIPHeader2", beetlemonkey, 133);
  (void) click_add_element_type("DecIPTTL", beetlemonkey, 134);
  (void) click_add_element_type("FixIPSrc", beetlemonkey, 135);
  (void) click_add_element_type("GetIPAddress", beetlemonkey, 136);
  (void) click_add_element_type("IPAddrPairRewriter", beetlemonkey, 137);
  (void) click_add_element_type("IPAddrRewriter", beetlemonkey, 138);
  (void) click_add_element_type("IPClassifier", beetlemonkey, 139);
  (void) click_add_element_type("IPEncap", beetlemonkey, 140);
  (void) click_add_element_type("IPFieldInfo", beetlemonkey, 141);
  IPFieldInfo::static_initialize();
  (void) click_add_element_type("IPFilter", beetlemonkey, 144);
  IPFilter::static_initialize();
  (void) click_add_element_type("IPFragmenter", beetlemonkey, 147);
  (void) click_add_element_type("IPGWOptions", beetlemonkey, 148);
  (void) click_add_element_type("IPInputCombo", beetlemonkey, 149);
  (void) click_add_element_type("IPMirror", beetlemonkey, 150);
  (void) click_add_element_type("IPNameInfo", beetlemonkey, 151);
  IPNameInfo::static_initialize();
  (void) click_add_element_type("IPOutputCombo", beetlemonkey, 154);
  (void) click_add_element_type("IPPrint", beetlemonkey, 155);
  (void) click_add_element_type("IPReassembler", beetlemonkey, 156);
  (void) click_add_element_type("IPRewriterPatterns", beetlemonkey, 157);
  (void) click_add_element_type("LinearIPLookup", beetlemonkey, 158);
  (void) click_add_element_type("StaticIPLookup", beetlemonkey, 159);
  (void) click_add_element_type("MarkIPCE", beetlemonkey, 160);
  (void) click_add_element_type("MarkIPHeader", beetlemonkey, 161);
  (void) click_add_element_type("RadixIPLookup", beetlemonkey, 162);
  (void) click_add_element_type("RFC2507Comp", beetlemonkey, 163);
  (void) click_add_element_type("RFC2507Decomp", beetlemonkey, 164);
  (void) click_add_element_type("RIPSend", beetlemonkey, 165);
  (void) click_add_element_type("RoundRobinIPMapper", beetlemonkey, 166);
  (void) click_add_element_type("SetIPAddress", beetlemonkey, 167);
  (void) click_add_element_type("SetIPChecksum", beetlemonkey, 168);
  (void) click_add_element_type("SetIPDSCP", beetlemonkey, 169);
  (void) click_add_element_type("SetRandIPAddress", beetlemonkey, 170);
  (void) click_add_element_type("SourceIPHashMapper", beetlemonkey, 171);
  (void) click_add_element_type("SortedIPLookup", beetlemonkey, 172);
  (void) click_add_element_type("StoreIPAddress", beetlemonkey, 173);
  (void) click_add_element_type("StripIPHeader", beetlemonkey, 174);
  (void) click_add_element_type("UnstripIPHeader", beetlemonkey, 175);
  (void) click_add_element_type("Defragmenter", beetlemonkey, 176);
  (void) click_add_element_type("Fragmenter", beetlemonkey, 177);
  (void) click_add_element_type("FragmentReceiver", beetlemonkey, 178);
  (void) click_add_element_type("FragmentSender", beetlemonkey, 179);
  (void) click_add_element_type("HeaderPacker", beetlemonkey, 180);
  (void) click_add_element_type("NetcodingCache", beetlemonkey, 181);
  (void) click_add_element_type("NetcodingDecoder", beetlemonkey, 182);
  (void) click_add_element_type("NetcodingEncoder", beetlemonkey, 183);
  (void) click_add_element_type("NetcodingPrint", beetlemonkey, 184);
  (void) click_add_element_type("QueueMonitor", beetlemonkey, 185);
  (void) click_add_element_type("TraceCollector", beetlemonkey, 186);
  (void) click_add_element_type("TraceReporter", beetlemonkey, 187);
  (void) click_add_element_type("FromSimDevice", beetlemonkey, 188);
  (void) click_add_element_type("ToSimDevice", beetlemonkey, 189);
  (void) click_add_element_type("ToSimTrace", beetlemonkey, 190);
  (void) click_add_element_type("AddressInfo", beetlemonkey, 191);
  (void) click_add_element_type("Align", beetlemonkey, 192);
  (void) click_add_element_type("AlignmentInfo", beetlemonkey, 193);
  (void) click_add_element_type("AverageCounter", beetlemonkey, 194);
  (void) click_add_element_type("BandwidthMeter", beetlemonkey, 195);
  (void) click_add_element_type("BandwidthShaper", beetlemonkey, 196);
  (void) click_add_element_type("Block", beetlemonkey, 197);
  (void) click_add_element_type("Burster", beetlemonkey, 198);
  (void) click_add_element_type("BandwidthRatedSplitter", beetlemonkey, 199);
  (void) click_add_element_type("BandwidthRatedUnqueue", beetlemonkey, 200);
  (void) click_add_element_type("CheckCRC32", beetlemonkey, 201);
  (void) click_add_element_type("CheckLength", beetlemonkey, 202);
  (void) click_add_element_type("CheckPaint", beetlemonkey, 203);
  (void) click_add_element_type("Classifier", beetlemonkey, 204);
  (void) click_add_element_type("CompareBlock", beetlemonkey, 205);
  (void) click_add_element_type("Counter", beetlemonkey, 206);
  (void) click_add_element_type("DelayShaper", beetlemonkey, 207);
  (void) click_add_element_type("DelayUnqueue", beetlemonkey, 208);
  (void) click_add_element_type("DevirtualizeInfo", beetlemonkey, 209);
  (void) click_add_element_type("Discard", beetlemonkey, 210);
  (void) click_add_element_type("DiscardNoFree", beetlemonkey, 211);
  (void) click_add_element_type("DriverManager", beetlemonkey, 212);
  (void) click_add_element_type("DropBroadcasts", beetlemonkey, 213);
  (void) click_add_element_type("DRRSched", beetlemonkey, 214);
  (void) click_add_element_type("ErrorElement", beetlemonkey, 215);
  (void) click_add_element_type("FrontDropQueue", beetlemonkey, 216);
  (void) click_add_element_type("Queue", beetlemonkey, 217);
  (void) click_add_element_type("FullNoteQueue", beetlemonkey, 218);
  (void) click_add_element_type("HashSwitch", beetlemonkey, 219);
  (void) click_add_element_type("Idle", beetlemonkey, 220);
  (void) click_add_element_type("InfiniteSource", beetlemonkey, 221);
  (void) click_add_element_type("LinkUnqueue", beetlemonkey, 222);
  (void) click_add_element_type("Message", beetlemonkey, 223);
  (void) click_add_element_type("Meter", beetlemonkey, 224);
  (void) click_add_element_type("MixedQueue", beetlemonkey, 225);
  (void) click_add_element_type("MSQueue", beetlemonkey, 226);
  (void) click_add_element_type("NotifierQueue", beetlemonkey, 227);
  (void) click_add_element_type("Null", beetlemonkey, 228);
  (void) click_add_element_type("PushNull", beetlemonkey, 229);
  (void) click_add_element_type("PullNull", beetlemonkey, 230);
  (void) click_add_element_type("Null4", beetlemonkey, 231);
  (void) click_add_element_type("Null5", beetlemonkey, 232);
  (void) click_add_element_type("Null6", beetlemonkey, 233);
  (void) click_add_element_type("Null7", beetlemonkey, 234);
  (void) click_add_element_type("Null8", beetlemonkey, 235);
  (void) click_add_element_type("Null1", beetlemonkey, 236);
  (void) click_add_element_type("Null2", beetlemonkey, 237);
  (void) click_add_element_type("Null3", beetlemonkey, 238);
  (void) click_add_element_type("Paint", beetlemonkey, 239);
  (void) click_add_element_type("PaintSwitch", beetlemonkey, 240);
  (void) click_add_element_type("PaintTee", beetlemonkey, 241);
  (void) click_add_element_type("PokeHandlers", beetlemonkey, 242);
  (void) click_add_element_type("PortInfo", beetlemonkey, 243);
  (void) click_add_element_type("Print", beetlemonkey, 244);
  (void) click_add_element_type("PrioSched", beetlemonkey, 245);
  (void) click_add_element_type("PullSwitch", beetlemonkey, 246);
  (void) click_add_element_type("QuitWatcher", beetlemonkey, 247);
  (void) click_add_element_type("RandomBitErrors", beetlemonkey, 248);
  (void) click_add_element_type("RandomSample", beetlemonkey, 249);
  (void) click_add_element_type("RandomSource", beetlemonkey, 250);
  (void) click_add_element_type("RandomSwitch", beetlemonkey, 251);
  (void) click_add_element_type("RatedSource", beetlemonkey, 252);
  (void) click_add_element_type("RatedSplitter", beetlemonkey, 253);
  (void) click_add_element_type("RatedUnqueue", beetlemonkey, 254);
  (void) click_add_element_type("RoundRobinSched", beetlemonkey, 255);
  (void) click_add_element_type("RoundRobinSwitch", beetlemonkey, 256);
  (void) click_add_element_type("ScheduleInfo", beetlemonkey, 257);
  (void) click_add_element_type("Script", beetlemonkey, 258);
  Script::static_initialize();
  (void) click_add_element_type("SetAnnoByte", beetlemonkey, 261);
  (void) click_add_element_type("SetCRC32", beetlemonkey, 262);
  (void) click_add_element_type("SetPacketType", beetlemonkey, 263);
  (void) click_add_element_type("SetTimestamp", beetlemonkey, 264);
  (void) click_add_element_type("Shaper", beetlemonkey, 265);
  (void) click_add_element_type("SimpleQueue", beetlemonkey, 266);
  (void) click_add_element_type("SpinlockAcquire", beetlemonkey, 267);
  (void) click_add_element_type("SpinlockInfo", beetlemonkey, 268);
  (void) click_add_element_type("SpinlockRelease", beetlemonkey, 269);
  (void) click_add_element_type("StaticPullSwitch", beetlemonkey, 270);
  (void) click_add_element_type("StaticSwitch", beetlemonkey, 271);
  (void) click_add_element_type("StoreData", beetlemonkey, 272);
  (void) click_add_element_type("StrideSched", beetlemonkey, 273);
  (void) click_add_element_type("StrideSwitch", beetlemonkey, 274);
  (void) click_add_element_type("Strip", beetlemonkey, 275);
  (void) click_add_element_type("StripToNetworkHeader", beetlemonkey, 276);
  (void) click_add_element_type("Suppressor", beetlemonkey, 277);
  (void) click_add_element_type("Switch", beetlemonkey, 278);
  (void) click_add_element_type("Tee", beetlemonkey, 279);
  (void) click_add_element_type("PullTee", beetlemonkey, 280);
  (void) click_add_element_type("TimedSink", beetlemonkey, 281);
  (void) click_add_element_type("TimedSource", beetlemonkey, 282);
  (void) click_add_element_type("Truncate", beetlemonkey, 283);
  (void) click_add_element_type("Unqueue", beetlemonkey, 284);
  (void) click_add_element_type("Unqueue2", beetlemonkey, 285);
  (void) click_add_element_type("Unstrip", beetlemonkey, 286);
  (void) click_add_element_type("CheckTCPHeader", beetlemonkey, 287);
  (void) click_add_element_type("CheckUDPHeader", beetlemonkey, 288);
  (void) click_add_element_type("DynamicUDPIPEncap", beetlemonkey, 289);
  (void) click_add_element_type("IPRewriter", beetlemonkey, 290);
  (void) click_add_element_type("SetTCPChecksum", beetlemonkey, 291);
  (void) click_add_element_type("SetUDPChecksum", beetlemonkey, 292);
  (void) click_add_element_type("TCPIPSend", beetlemonkey, 293);
  (void) click_add_element_type("TCPRewriter", beetlemonkey, 294);
  (void) click_add_element_type("UDPIPEncap", beetlemonkey, 295);
  (void) click_add_element_type("FromDump", beetlemonkey, 296);
  (void) click_add_element_type("ToDump", beetlemonkey, 297);
  (void) click_add_element_type("CheckVLAN", beetlemonkey, 298);
  (void) click_add_element_type("PrintVLAN", beetlemonkey, 299);
  (void) click_add_element_type("RestoreVLAN", beetlemonkey, 300);
  (void) click_add_element_type("StoreVLAN", beetlemonkey, 301);
  (void) click_add_element_type("VLANDecap", beetlemonkey, 302);
  (void) click_add_element_type("VLANEncap", beetlemonkey, 303);
  (void) click_add_element_type("VLANTable", beetlemonkey, 304);
  (void) click_add_element_type("VLANTag", beetlemonkey, 305);
  (void) click_add_element_type("CountErrors", beetlemonkey, 306);
  (void) click_add_element_type("CountFecBytes", beetlemonkey, 307);
  (void) click_add_element_type("CountFragBytes", beetlemonkey, 308);
  (void) click_add_element_type("ErrorThreshold", beetlemonkey, 309);
  (void) click_add_element_type("LocationHistogram", beetlemonkey, 310);
  (void) click_add_element_type("PrintPower", beetlemonkey, 311);
  (void) click_add_element_type("PrintRate", beetlemonkey, 312);
  (void) click_add_element_type("PrintSeq", beetlemonkey, 313);
  (void) click_add_element_type("WifiCounter", beetlemonkey, 314);
  (void) click_add_element_type("AssociationResponder", beetlemonkey, 315);
  (void) click_add_element_type("BeaconSource", beetlemonkey, 316);
  (void) click_add_element_type("OpenAuthResponder", beetlemonkey, 317);
  (void) click_add_element_type("ProbeResponder", beetlemonkey, 318);
  (void) click_add_element_type("StationTable", beetlemonkey, 319);
  (void) click_add_element_type("ARPTable", beetlemonkey, 320);
  (void) click_add_element_type("AthdescDecap", beetlemonkey, 321);
  (void) click_add_element_type("AthdescEncap", beetlemonkey, 322);
  (void) click_add_element_type("AutoRateFallback", beetlemonkey, 323);
  (void) click_add_element_type("AvailableRates", beetlemonkey, 324);
  (void) click_add_element_type("CopyRXStats", beetlemonkey, 325);
  (void) click_add_element_type("EtherCount", beetlemonkey, 326);
  (void) click_add_element_type("ExtraDecap", beetlemonkey, 327);
  (void) click_add_element_type("ExtraEncap", beetlemonkey, 328);
  (void) click_add_element_type("FilterFailures", beetlemonkey, 329);
  (void) click_add_element_type("FilterPhyErr", beetlemonkey, 330);
  (void) click_add_element_type("FilterTX", beetlemonkey, 331);
  (void) click_add_element_type("CheckFragment", beetlemonkey, 332);
  (void) click_add_element_type("Defragment", beetlemonkey, 333);
  (void) click_add_element_type("Fragment", beetlemonkey, 334);
  (void) click_add_element_type("FragmentAck", beetlemonkey, 335);
  (void) click_add_element_type("FragmentDecap", beetlemonkey, 336);
  (void) click_add_element_type("FragmentDupeFilter", beetlemonkey, 337);
  (void) click_add_element_type("FragmentEncap", beetlemonkey, 338);
  (void) click_add_element_type("FragmentResender", beetlemonkey, 339);
  (void) click_add_element_type("PrintFragment", beetlemonkey, 340);
  (void) click_add_element_type("LinkFailureDetection", beetlemonkey, 341);
  (void) click_add_element_type("LinkTable", beetlemonkey, 342);
  (void) click_add_element_type("MadwifiRate", beetlemonkey, 343);
  (void) click_add_element_type("PacketStore", beetlemonkey, 344);
  (void) click_add_element_type("PrintTXFeedback", beetlemonkey, 345);
  (void) click_add_element_type("PrintWifi", beetlemonkey, 346);
  (void) click_add_element_type("Prism2Decap", beetlemonkey, 347);
  (void) click_add_element_type("Prism2Encap", beetlemonkey, 348);
  (void) click_add_element_type("ProbeTXRate", beetlemonkey, 349);
  (void) click_add_element_type("PushAnno", beetlemonkey, 350);
  (void) click_add_element_type("RadiotapDecap", beetlemonkey, 351);
  (void) click_add_element_type("RadiotapEncap", beetlemonkey, 352);
  (void) click_add_element_type("ReadAnno", beetlemonkey, 353);
  (void) click_add_element_type("RXStats", beetlemonkey, 354);
  (void) click_add_element_type("SetRTS", beetlemonkey, 355);
  (void) click_add_element_type("SetTXPower", beetlemonkey, 356);
  (void) click_add_element_type("SetTXRate", beetlemonkey, 357);
  (void) click_add_element_type("SetWifiExtraFlag", beetlemonkey, 358);
  (void) click_add_element_type("AssociationRequester", beetlemonkey, 359);
  (void) click_add_element_type("BeaconScanner", beetlemonkey, 360);
  (void) click_add_element_type("BeaconTracker", beetlemonkey, 361);
  (void) click_add_element_type("OpenAuthRequester", beetlemonkey, 362);
  (void) click_add_element_type("ProbeRequester", beetlemonkey, 363);
  (void) click_add_element_type("TXFLog", beetlemonkey, 364);
  (void) click_add_element_type("TXStat", beetlemonkey, 365);
  (void) click_add_element_type("WepDecap", beetlemonkey, 366);
  (void) click_add_element_type("WepEncap", beetlemonkey, 367);
  (void) click_add_element_type("WifiDecap", beetlemonkey, 368);
  (void) click_add_element_type("WifiDefrag", beetlemonkey, 369);
  (void) click_add_element_type("WifiDupeFilter", beetlemonkey, 370);
  (void) click_add_element_type("WifiEncap", beetlemonkey, 371);
  (void) click_add_element_type("WifiFragment", beetlemonkey, 372);
  (void) click_add_element_type("WifiSeq", beetlemonkey, 373);
  (void) click_add_element_type("WirelessInfo", beetlemonkey, 374);
  CLICK_DMALLOC_REG("nXXX");
}

void
click_unexport_elements()
{
  CheckIPHeader::static_cleanup();
  IPFieldInfo::static_cleanup();
  IPFilter::static_cleanup();
  IPNameInfo::static_cleanup();
  Script::static_cleanup();
} 